{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useState}from\"react\";import PropTypes from\"prop-types\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import{Container,Content,View}from\"native-base\";import{Col,Row,Grid}from\"react-native-easy-grid\";import{Formik}from\"formik\";import ArrowIcon from\"../../assets/images/path.svg\";import Button from\"../../components/Button\";import Header from\"../../components/Header\";import Typography from\"../../components/Typography\";import TextField from\"../../components/TextField\";import ToggleSwitch from\"../../components/ToggleSwitch\";import SwipeModal from\"../../components/SwipeModal\";import global from\"../../utils/GlobalStyles\";var styles=StyleSheet.create({menu:{width:\"100%\",height:42,flexDirection:\"row\",alignItems:\"center\",justifyContent:\"space-between\",paddingHorizontal:5},menuArrow:{width:7,height:12},switchCol:{alignItems:\"flex-end\",justifyContent:\"center\"}});export default function PasswordSecurity(_ref){var navigation=_ref.navigation;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),touchId=_useState2[0],setTouchId=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),faceId=_useState4[0],setFaceId=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),alert=_useState6[0],setAlert=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),password=_useState8[0],setPassword=_useState8[1];var _useState9=useState(\"\"),_useState10=_slicedToArray(_useState9,2),biometric=_useState10[0],setBiometric=_useState10[1];var _useState11=useState({secure_entry:true,icon:\"eye-off\"}),_useState12=_slicedToArray(_useState11,2),passwordSecurity=_useState12[0],setPasswordSecurity=_useState12[1];var openAlert=function openAlert(){setAlert(true);};var closeAlert=function closeAlert(type){if(type===\"Touch ID\"){setTouchId(true);}else if(type===\"Face ID\"){setFaceId(true);}setAlert(false);setPassword(\"\");};var toggleTouchId=function toggleTouchId(state){if(state===true){openAlert();setBiometric(\"Touch ID\");}else{setTouchId(false);}};var toggleFaceId=function toggleFaceId(state){if(state===true){openAlert();setBiometric(\"Face ID\");}else{setFaceId(false);}};var showPassword=function showPassword(){if(passwordSecurity.secure_entry)setPasswordSecurity({secure_entry:true,icon:\"eye-off\"});setPasswordSecurity({secure_entry:false,icon:\"eye\"});};return React.createElement(Container,null,React.createElement(Header,{back:true,transparent:true}),React.createElement(Content,{style:global.wrapper},React.createElement(View,{style:global.content},React.createElement(Typography,{text:\"Password & Security\",type:\"title2\"}),React.createElement(Grid,{style:global.body},React.createElement(Row,{size:4},React.createElement(Col,{size:3},React.createElement(View,{style:styles.menu},React.createElement(Typography,{type:\"body-bold\",text:\"TOUCH ID\"}))),React.createElement(Col,{size:1,style:styles.switchCol},React.createElement(ToggleSwitch,{value:touchId,onAsyncPress:function onAsyncPress(){if(touchId===true){toggleTouchId(false);}else{toggleTouchId(true);}}}))),React.createElement(Row,{size:4,style:global.fieldSeparator},React.createElement(Col,{size:3},React.createElement(View,{style:styles.menu},React.createElement(Typography,{type:\"body-bold\",text:\"FACE ID\"}))),React.createElement(Col,{size:1,style:styles.switchCol},React.createElement(ToggleSwitch,{value:faceId,onAsyncPress:function onAsyncPress(){if(faceId===true){toggleFaceId(false);}else{toggleFaceId(true);}}}))),React.createElement(Row,{size:4,style:global.fieldSeparator},React.createElement(Col,null,React.createElement(TouchableOpacity,{style:styles.menu},React.createElement(View,{style:styles.menuText},React.createElement(Typography,{type:\"body-bold\",text:\"CHANGE PASSWORD\"})),React.createElement(ArrowIcon,null))))))),React.createElement(SwipeModal,{fullWidth:true,state:alert,onClose:closeAlert},React.createElement(View,{style:global.modalView},React.createElement(Typography,{text:\"Activate \"+biometric,type:\"title2\"}),React.createElement(Formik,{initialValues:{password:password},onSubmit:null},function(_ref2){var handleChange=_ref2.handleChange,handleBlur=_ref2.handleBlur;return React.createElement(Grid,{style:{marginTop:20}},React.createElement(Row,{size:4},React.createElement(Col,null,React.createElement(TextField,{type:\"password\",onBlur:handleBlur(\"password\"),label:\"Password\",secureTextEntry:passwordSecurity.secure_entry,showPassword:showPassword,value:password,onChangeText:function onChangeText(value){handleChange('password');setPassword(value);}}))));}))),alert&&React.createElement(View,{style:global.modalFooterView},React.createElement(Button,{full:true,variant:\"primary-contained\",text:\"ACTIVATE\",onPress:function onPress(){closeAlert(biometric);}})));}PasswordSecurity.propTypes={navigation:PropTypes.objectOf(PropTypes.any).isRequired};","map":{"version":3,"sources":["/Applications/MAMP/htdocs/greninja/app/screens/Profile/PasswordSecurity.js"],"names":["React","useState","PropTypes","Container","Content","View","Col","Row","Grid","Formik","ArrowIcon","Button","Header","Typography","TextField","ToggleSwitch","SwipeModal","global","styles","StyleSheet","create","menu","width","height","flexDirection","alignItems","justifyContent","paddingHorizontal","menuArrow","switchCol","PasswordSecurity","navigation","touchId","setTouchId","faceId","setFaceId","alert","setAlert","password","setPassword","biometric","setBiometric","secure_entry","icon","passwordSecurity","setPasswordSecurity","openAlert","closeAlert","type","toggleTouchId","state","toggleFaceId","showPassword","wrapper","content","body","fieldSeparator","menuText","modalView","handleChange","handleBlur","marginTop","value","modalFooterView","propTypes","objectOf","any","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { StyleSheet, TouchableOpacity } from \"react-native\";\nimport { Container, Content, View } from \"native-base\";\nimport { Col, Row, Grid } from \"react-native-easy-grid\";\nimport { Formik } from \"formik\";\n\nimport ArrowIcon from \"../../assets/images/path.svg\";\nimport Button from \"../../components/Button\";\nimport Header from \"../../components/Header\";\nimport Typography from \"../../components/Typography\";\nimport TextField from \"../../components/TextField\";\nimport ToggleSwitch from \"../../components/ToggleSwitch\";\nimport SwipeModal from \"../../components/SwipeModal\";\n\nimport global from \"../../utils/GlobalStyles\";\n\nconst styles = StyleSheet.create({\n  menu: {\n    width: \"100%\",\n    height: 42,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 5,\n  },\n  menuArrow: {\n    width: 7,\n    height: 12,\n  },\n  switchCol: {\n    alignItems: \"flex-end\",\n    justifyContent: \"center\",\n  },\n});\n\nexport default function PasswordSecurity({ navigation }) {\n  const [touchId, setTouchId] = useState(false);\n  const [faceId, setFaceId] = useState(false);\n  const [alert, setAlert] = useState(false);\n  const [password, setPassword] = useState(\"\");\n  const [biometric, setBiometric] = useState(\"\");\n  const [passwordSecurity, setPasswordSecurity] = useState({ secure_entry: true, icon: \"eye-off\" });\n\n  const openAlert = () => {\n    setAlert(true);\n  };\n\n  const closeAlert = (type) => {\n    if (type === \"Touch ID\") {\n      setTouchId(true);\n    } else if (type === \"Face ID\") {\n      setFaceId(true);\n    }\n    setAlert(false);\n    setPassword(\"\");\n  };\n\n  const toggleTouchId = (state) => {\n    if (state === true) {\n      openAlert();\n      setBiometric(\"Touch ID\");\n    } else {\n      setTouchId(false);\n    }\n  };\n\n  const toggleFaceId = (state) => {\n    if (state === true) {\n      openAlert();\n      setBiometric(\"Face ID\");\n    } else {\n      setFaceId(false);\n    }\n  };\n\n  const showPassword = () => {\n    if (passwordSecurity.secure_entry) setPasswordSecurity({ secure_entry: true, icon: \"eye-off\" });\n    setPasswordSecurity({ secure_entry: false, icon: \"eye\" });\n  };\n\n\n  return (\n    <Container>\n      <Header back transparent />\n\n      <Content style={global.wrapper}>\n        <View style={global.content}>\n          <Typography text=\"Password & Security\" type=\"title2\" />\n\n          <Grid style={global.body}>\n            <Row size={4}>\n              <Col size={3}>\n                <View style={styles.menu}>\n                  <Typography type=\"body-bold\" text=\"TOUCH ID\" />\n                </View>\n              </Col>\n              <Col size={1} style={styles.switchCol}>\n                <ToggleSwitch\n                  value={touchId}\n                  onAsyncPress={() => {\n                    if (touchId === true) {\n                      toggleTouchId(false);\n                    } else {\n                      toggleTouchId(true);\n                    }\n                  }}\n                />\n              </Col>\n            </Row>\n            <Row size={4} style={global.fieldSeparator}>\n              <Col size={3}>\n                <View style={styles.menu}>\n                  <Typography type=\"body-bold\" text=\"FACE ID\" />\n                </View>\n              </Col>\n              <Col size={1} style={styles.switchCol}>\n                <ToggleSwitch\n                  value={faceId}\n                  onAsyncPress={() => {\n                    if (faceId === true) {\n                      toggleFaceId(false);\n                    } else {\n                      toggleFaceId(true);\n                    }\n                  }}\n                />\n              </Col>\n            </Row>\n            <Row size={4} style={global.fieldSeparator}>\n              <Col>\n                <TouchableOpacity style={styles.menu}>\n                  <View style={styles.menuText}>\n                    <Typography type=\"body-bold\" text=\"CHANGE PASSWORD\" />\n                  </View>\n                  <ArrowIcon />\n                </TouchableOpacity>\n              </Col>\n            </Row>\n          </Grid>\n\n        </View>\n      </Content>\n\n      <SwipeModal fullWidth state={alert} onClose={closeAlert}>\n        <View style={global.modalView}>\n          <Typography text={`Activate ${biometric}`} type=\"title2\" />\n\n          <Formik\n            initialValues={{ password }}\n            onSubmit={null}\n          >\n            {({ handleChange, handleBlur }) => (\n              <Grid style={{ marginTop: 20 }}>\n                <Row size={4}>\n                  <Col>\n                    <TextField\n                      type=\"password\"\n                      onBlur={handleBlur(\"password\")}\n                      label=\"Password\"\n                      secureTextEntry={passwordSecurity.secure_entry}\n                      showPassword={showPassword}\n                      value={password}\n                      onChangeText={(value) => {\n                        handleChange('password');\n                        setPassword(value);\n                      }}\n                    />\n                  </Col>\n                </Row>\n              </Grid>\n            )}\n          </Formik>\n\n        </View>\n      </SwipeModal>\n\n      {\n        alert && (\n          <View style={global.modalFooterView}>\n            <Button full variant=\"primary-contained\" text=\"ACTIVATE\" onPress={() => { closeAlert(biometric); }} />\n          </View>\n        )\n      }\n\n    </Container >\n  );\n}\n\nPasswordSecurity.propTypes = {\n  navigation: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}