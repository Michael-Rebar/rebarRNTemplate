{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import React from\"react\";import PropTypes from\"prop-types\";import MaterialIcon from\"@expo/vector-icons/MaterialIcons\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Text from\"react-native-web/dist/exports/Text\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import{View}from\"native-base\";import color from\"../utils/Color\";import global from\"../utils/GlobalStyles\";var styles=StyleSheet.create({textArrowView:{borderWidth:1,borderRadius:3,borderColor:color.veryLightPink,backgroundColor:color.white,width:\"100%\",height:65,flex:1,alignItems:\"center\",flexDirection:\"row\",justifyContent:\"space-between\",paddingHorizontal:24},textArrowIcon:{color:color.orangeRed},buttonStyle:{marginTop:12}});var CustomButton=function CustomButton(_ref){var buttonType=_ref.buttonType,content=_ref.content,textStyle=_ref.textStyle,props=_objectWithoutProperties(_ref,[\"buttonType\",\"content\",\"textStyle\"]);var buttonContent=null;switch(buttonType){case\"text-arrow\":buttonContent=React.createElement(View,{style:styles.textArrowView},React.createElement(Text,{style:global.textButton},content.text),React.createElement(MaterialIcon,{style:styles.textArrowIcon,name:\"arrow-forward\",size:24}));break;default:buttonContent=React.createElement(Text,{style:textStyle},content.text);break;}return React.createElement(TouchableOpacity,_extends({style:styles.buttonStyle},props),buttonContent);};CustomButton.propTypes={buttonType:PropTypes.string,content:PropTypes.objectOf(PropTypes.any),textStyle:PropTypes.objectOf(PropTypes.any)};CustomButton.defaultProps={buttonType:\"\",content:{},textStyle:{}};export default CustomButton;","map":{"version":3,"sources":["/Applications/MAMP/htdocs/greninja/app/components/CustomButton.js"],"names":["React","PropTypes","MaterialIcon","View","color","global","styles","StyleSheet","create","textArrowView","borderWidth","borderRadius","borderColor","veryLightPink","backgroundColor","white","width","height","flex","alignItems","flexDirection","justifyContent","paddingHorizontal","textArrowIcon","orangeRed","buttonStyle","marginTop","CustomButton","buttonType","content","textStyle","props","buttonContent","textButton","text","propTypes","string","objectOf","any","defaultProps"],"mappings":"0IAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,SAAP,KAAsB,YAAtB,CACA,MAAOC,CAAAA,YAAP,wC,mMAEA,OAASC,IAAT,KAAqB,aAArB,CAEA,MAAOC,CAAAA,KAAP,sBACA,MAAOC,CAAAA,MAAP,6BAEA,GAAMC,CAAAA,MAAM,CAAGC,UAAU,CAACC,MAAX,CAAkB,CAC/BC,aAAa,CAAE,CACbC,WAAW,CAAE,CADA,CAEbC,YAAY,CAAE,CAFD,CAGbC,WAAW,CAAER,KAAK,CAACS,aAHN,CAIbC,eAAe,CAAEV,KAAK,CAACW,KAJV,CAKbC,KAAK,CAAE,MALM,CAMbC,MAAM,CAAE,EANK,CAObC,IAAI,CAAE,CAPO,CAQbC,UAAU,CAAE,QARC,CASbC,aAAa,CAAE,KATF,CAUbC,cAAc,CAAE,eAVH,CAWbC,iBAAiB,CAAE,EAXN,CADgB,CAc/BC,aAAa,CAAE,CACbnB,KAAK,CAAEA,KAAK,CAACoB,SADA,CAdgB,CAiB/BC,WAAW,CAAE,CACXC,SAAS,CAAE,EADA,CAjBkB,CAAlB,CAAf,CAsBA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAAkD,IAA/CC,CAAAA,UAA+C,MAA/CA,UAA+C,CAAnCC,OAAmC,MAAnCA,OAAmC,CAA1BC,SAA0B,MAA1BA,SAA0B,CAAZC,KAAY,qEACrE,GAAIC,CAAAA,aAAa,CAAG,IAApB,CAEA,OAAQJ,UAAR,EACE,IAAK,YAAL,CACEI,aAAa,CACX,oBAAC,IAAD,EAAM,KAAK,CAAE1B,MAAM,CAACG,aAApB,EACE,oBAAC,IAAD,EAAM,KAAK,CAAEJ,MAAM,CAAC4B,UAApB,EAAiCJ,OAAO,CAACK,IAAzC,CADF,CAEE,oBAAC,YAAD,EAAc,KAAK,CAAE5B,MAAM,CAACiB,aAA5B,CAA2C,IAAI,CAAC,eAAhD,CAAgE,IAAI,CAAE,EAAtE,EAFF,CADF,CAMA,MACF,QACES,aAAa,CAAG,oBAAC,IAAD,EAAM,KAAK,CAAEF,SAAb,EAAyBD,OAAO,CAACK,IAAjC,CAAhB,CACA,MAXJ,CAcA,MACE,qBAAC,gBAAD,WAAkB,KAAK,CAAE5B,MAAM,CAACmB,WAAhC,EAAiDM,KAAjD,EACGC,aADH,CADF,CAKD,CAtBD,CAwBAL,YAAY,CAACQ,SAAb,CAAyB,CACvBP,UAAU,CAAE3B,SAAS,CAACmC,MADC,CAEvBP,OAAO,CAAE5B,SAAS,CAACoC,QAAV,CAAmBpC,SAAS,CAACqC,GAA7B,CAFc,CAGvBR,SAAS,CAAE7B,SAAS,CAACoC,QAAV,CAAmBpC,SAAS,CAACqC,GAA7B,CAHY,CAAzB,CAMAX,YAAY,CAACY,YAAb,CAA4B,CAC1BX,UAAU,CAAE,EADc,CAE1BC,OAAO,CAAE,EAFiB,CAG1BC,SAAS,CAAE,EAHe,CAA5B,CAMA,cAAeH,CAAAA,YAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport MaterialIcon from 'react-native-vector-icons/MaterialIcons';\nimport { StyleSheet, Text, TouchableOpacity } from \"react-native\";\nimport { View } from \"native-base\";\n\nimport color from \"../utils/Color\";\nimport global from \"../utils/GlobalStyles\";\n\nconst styles = StyleSheet.create({\n  textArrowView: {\n    borderWidth: 1,\n    borderRadius: 3,\n    borderColor: color.veryLightPink,\n    backgroundColor: color.white,\n    width: \"100%\",\n    height: 65,\n    flex: 1,\n    alignItems: \"center\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 24,\n  },\n  textArrowIcon: {\n    color: color.orangeRed,\n  },\n  buttonStyle: {\n    marginTop: 12,\n  },\n});\n\nconst CustomButton = ({ buttonType, content, textStyle, ...props }) => {\n  let buttonContent = null;\n\n  switch (buttonType) {\n    case \"text-arrow\":\n      buttonContent = (\n        <View style={styles.textArrowView}>\n          <Text style={global.textButton}>{content.text}</Text>\n          <MaterialIcon style={styles.textArrowIcon} name=\"arrow-forward\" size={24} />\n        </View>\n      );\n      break;\n    default:\n      buttonContent = <Text style={textStyle}>{content.text}</Text>;\n      break;\n  }\n\n  return (\n    <TouchableOpacity style={styles.buttonStyle} {...props}>\n      {buttonContent}\n    </TouchableOpacity>\n  );\n};\n\nCustomButton.propTypes = {\n  buttonType: PropTypes.string,\n  content: PropTypes.objectOf(PropTypes.any),\n  textStyle: PropTypes.objectOf(PropTypes.any),\n};\n\nCustomButton.defaultProps = {\n  buttonType: \"\",\n  content: {},\n  textStyle: {},\n};\n\nexport default CustomButton;\n"]},"metadata":{},"sourceType":"module"}