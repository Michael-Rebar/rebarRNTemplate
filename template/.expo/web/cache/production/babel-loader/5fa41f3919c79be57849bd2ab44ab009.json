{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useRef,useState,useEffect}from\"react\";import PropTypes from\"prop-types\";import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Animated from\"react-native-web/dist/exports/Animated\";import Constants from\"expo-constants\";import color from\"../utils/Color\";var styles=StyleSheet.create({progressBar:{marginTop:Constants.statusBarHeight,flexDirection:'row',height:4,width:'100%',backgroundColor:color.veryLightPink,borderColor:'#000',borderWidth:0,borderRadius:1}});function useInterval(callback,delay){var savedCallback=useRef();useEffect(function(){savedCallback.current=callback;},[callback]);useEffect(function(){function tick(){savedCallback.current();}if(delay!==null){var id=setInterval(tick,delay);return function(){return clearInterval(id);};}return true;},[delay]);}var HeaderProgressBar=function HeaderProgressBar(props){var progressVal=props.progressVal;var animation=useRef(new Animated.Value(0));var _useState=useState(0),_useState2=_slicedToArray(_useState,2),progress=_useState2[0],setProgress=_useState2[1];useInterval(function(){if(progress<100){setProgress(progressVal);}},1000);useEffect(function(){Animated.timing(animation.current,{toValue:progress,duration:100,useNativeDriver:false}).start();},[progress]);var width=animation.current.interpolate({inputRange:[0,100],outputRange:[\"0%\",\"100%\"],extrapolate:\"clamp\"});return React.createElement(View,{style:styles.progressBar},React.createElement(Animated.View,{style:[StyleSheet.absoluteFill,{backgroundColor:\"#ff3736\",width:width}]}));};HeaderProgressBar.propTypes={progressVal:PropTypes.number.isRequired};export default HeaderProgressBar;","map":{"version":3,"sources":["/Applications/MAMP/htdocs/greninja/app/components/HeaderProgressBar.js"],"names":["React","useRef","useState","useEffect","PropTypes","Constants","color","styles","StyleSheet","create","progressBar","marginTop","statusBarHeight","flexDirection","height","width","backgroundColor","veryLightPink","borderColor","borderWidth","borderRadius","useInterval","callback","delay","savedCallback","current","tick","id","setInterval","clearInterval","HeaderProgressBar","props","progressVal","animation","Animated","Value","progress","setProgress","timing","toValue","duration","useNativeDriver","start","interpolate","inputRange","outputRange","extrapolate","absoluteFill","propTypes","number","isRequired"],"mappings":"iEAAA,MAAOA,CAAAA,KAAP,EAAgBC,MAAhB,CAAwBC,QAAxB,CAAkCC,SAAlC,KAAmD,OAAnD,CACA,MAAOC,CAAAA,SAAP,KAAsB,YAAtB,C,mLAEA,MAAOC,CAAAA,SAAP,KAAsB,gBAAtB,CAEA,MAAOC,CAAAA,KAAP,sBAEA,GAAMC,CAAAA,MAAM,CAAGC,UAAU,CAACC,MAAX,CAAkB,CAC/BC,WAAW,CAAE,CACXC,SAAS,CAAEN,SAAS,CAACO,eADV,CAEXC,aAAa,CAAE,KAFJ,CAGXC,MAAM,CAAE,CAHG,CAIXC,KAAK,CAAE,MAJI,CAKXC,eAAe,CAAEV,KAAK,CAACW,aALZ,CAMXC,WAAW,CAAE,MANF,CAOXC,WAAW,CAAE,CAPF,CAQXC,YAAY,CAAE,CARH,CADkB,CAAlB,CAAf,CAaA,QAASC,CAAAA,WAAT,CAAqBC,QAArB,CAA+BC,KAA/B,CAAsC,CACpC,GAAMC,CAAAA,aAAa,CAAGvB,MAAM,EAA5B,CAEAE,SAAS,CAAC,UAAM,CACdqB,aAAa,CAACC,OAAd,CAAwBH,QAAxB,CACD,CAFQ,CAEN,CAACA,QAAD,CAFM,CAAT,CAIAnB,SAAS,CAAC,UAAM,CACd,QAASuB,CAAAA,IAAT,EAAgB,CACdF,aAAa,CAACC,OAAd,GACD,CAED,GAAIF,KAAK,GAAK,IAAd,CAAoB,CAClB,GAAMI,CAAAA,EAAE,CAAGC,WAAW,CAACF,IAAD,CAAOH,KAAP,CAAtB,CACA,MAAO,kBAAMM,CAAAA,aAAa,CAACF,EAAD,CAAnB,EAAP,CACD,CAED,MAAO,KAAP,CACD,CAXQ,CAWN,CAACJ,KAAD,CAXM,CAAT,CAYD,CAED,GAAMO,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,KAAD,CAAW,IAC3BC,CAAAA,WAD2B,CACXD,KADW,CAC3BC,WAD2B,CAEnC,GAAMC,CAAAA,SAAS,CAAGhC,MAAM,CAAC,GAAIiC,CAAAA,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAD,CAAxB,CAFmC,cAGHjC,QAAQ,CAAC,CAAD,CAHL,wCAG5BkC,QAH4B,eAGlBC,WAHkB,eAKnChB,WAAW,CAAC,UAAM,CAChB,GAAIe,QAAQ,CAAG,GAAf,CAAoB,CAClBC,WAAW,CAACL,WAAD,CAAX,CACD,CACF,CAJU,CAIR,IAJQ,CAAX,CAMA7B,SAAS,CAAC,UAAM,CACd+B,QAAQ,CAACI,MAAT,CAAgBL,SAAS,CAACR,OAA1B,CAAmC,CACjCc,OAAO,CAAEH,QADwB,CAEjCI,QAAQ,CAAE,GAFuB,CAGjCC,eAAe,CAAE,KAHgB,CAAnC,EAIGC,KAJH,GAKD,CANQ,CAMN,CAACN,QAAD,CANM,CAAT,CAQA,GAAMrB,CAAAA,KAAK,CAAGkB,SAAS,CAACR,OAAV,CAAkBkB,WAAlB,CAA8B,CAC1CC,UAAU,CAAE,CAAC,CAAD,CAAI,GAAJ,CAD8B,CAE1CC,WAAW,CAAE,CAAC,IAAD,CAAO,MAAP,CAF6B,CAG1CC,WAAW,CAAE,OAH6B,CAA9B,CAAd,CAMA,MACE,qBAAC,IAAD,EAAM,KAAK,CAAEvC,MAAM,CAACG,WAApB,EACE,oBAAC,QAAD,CAAU,IAAV,EAAe,KAAK,CAAE,CAACF,UAAU,CAACuC,YAAZ,CAA0B,CAAE/B,eAAe,CAAE,SAAnB,CAA8BD,KAAK,CAALA,KAA9B,CAA1B,CAAtB,EADF,CADF,CAKD,CA9BD,CAgCAe,iBAAiB,CAACkB,SAAlB,CAA8B,CAC5BhB,WAAW,CAAE5B,SAAS,CAAC6C,MAAV,CAAiBC,UADF,CAA9B,CAIA,cAAepB,CAAAA,iBAAf","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { View, StyleSheet, Animated } from \"react-native\";\nimport Constants from \"expo-constants\";\n\nimport color from \"../utils/Color\";\n\nconst styles = StyleSheet.create({\n  progressBar: {\n    marginTop: Constants.statusBarHeight,\n    flexDirection: 'row',\n    height: 4,\n    width: '100%',\n    backgroundColor: color.veryLightPink,\n    borderColor: '#000',\n    borderWidth: 0,\n    borderRadius: 1,\n  },\n});\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n\n    return true;\n  }, [delay]);\n}\n\nconst HeaderProgressBar = (props) => {\n  const { progressVal } = props;\n  const animation = useRef(new Animated.Value(0));\n  const [progress, setProgress] = useState(0);\n\n  useInterval(() => {\n    if (progress < 100) {\n      setProgress(progressVal);\n    }\n  }, 1000);\n\n  useEffect(() => {\n    Animated.timing(animation.current, {\n      toValue: progress,\n      duration: 100,\n      useNativeDriver: false,\n    }).start();\n  }, [progress]);\n\n  const width = animation.current.interpolate({\n    inputRange: [0, 100],\n    outputRange: [\"0%\", \"100%\"],\n    extrapolate: \"clamp\",\n  });\n\n  return (\n    <View style={styles.progressBar}>\n      <Animated.View style={[StyleSheet.absoluteFill, { backgroundColor: \"#ff3736\", width }]} />\n    </View>\n  );\n};\n\nHeaderProgressBar.propTypes = {\n  progressVal: PropTypes.number.isRequired,\n};\n\nexport default HeaderProgressBar;\n"]},"metadata":{},"sourceType":"module"}