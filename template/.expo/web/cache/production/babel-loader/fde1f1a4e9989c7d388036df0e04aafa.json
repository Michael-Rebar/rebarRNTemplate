{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useState}from\"react\";import PropTypes from\"prop-types\";import{Container,Content,View}from\"native-base\";import{Col,Row,Grid}from\"react-native-easy-grid\";import{Formik}from\"formik\";import*as Yup from\"yup\";import Header from\"../../components/Header\";import Footer from\"../../components/Footer\";import Typography from\"../../components/Typography\";import Button from\"../../components/Button\";import TextField from\"../../components/TextField\";import PasswordChecklist from\"../../components/PasswordChecklist\";import global from\"../../utils/GlobalStyles\";var validationSchema=Yup.object().shape({email:Yup.string().email(\"Email address format is invalid\")});export default function UpdatePassword(_ref){var navigation=_ref.navigation;var _useState=useState({email:false,password:false}),_useState2=_slicedToArray(_useState,2),focus=_useState2[0],setFocus=_useState2[1];var _useState3=useState({new_password:\"\",confirm_password:\"\"}),_useState4=_slicedToArray(_useState3,2),initialValues=_useState4[0],setInitialValues=_useState4[1];return React.createElement(Container,null,React.createElement(Header,{logo:true,menu:true,close:true,transparent:true}),React.createElement(Content,{style:global.wrapper},React.createElement(View,{style:global.content},React.createElement(Typography,{text:\"Update Password\",type:\"title2\"}),React.createElement(Formik,{enableReinitialize:true,initialValues:initialValues,validationSchema:validationSchema,onSubmit:function onSubmit(values,_ref2){var setSubmitting=_ref2.setSubmitting;setTimeout(function(){console.log(values);setSubmitting(false);},400);}},function(_ref3){var values=_ref3.values,errors=_ref3.errors,touched=_ref3.touched,handleChange=_ref3.handleChange,handleBlur=_ref3.handleBlur,handleSubmit=_ref3.handleSubmit,handleReset=_ref3.handleReset;return React.createElement(Grid,{style:global.body},React.createElement(Row,{size:4},React.createElement(Col,null,React.createElement(TextField,{label:\"Old Password\",focus:focus.email,onFocus:function(_onFocus){function onFocus(){return _onFocus.apply(this,arguments);}onFocus.toString=function(){return _onFocus.toString();};return onFocus;}(function(){return onFocus(\"email\");}),onBlur:function(_onBlur){function onBlur(){return _onBlur.apply(this,arguments);}onBlur.toString=function(){return _onBlur.toString();};return onBlur;}(function(){onBlur(\"email\");handleBlur(\"email\");}),value:values.email,onChangeText:handleChange(\"email\")}))),React.createElement(Row,{size:4,style:global.fieldSeparator},React.createElement(Col,null,React.createElement(TextField,{label:\"New Password\",focus:focus.email,onFocus:function(_onFocus2){function onFocus(){return _onFocus2.apply(this,arguments);}onFocus.toString=function(){return _onFocus2.toString();};return onFocus;}(function(){return onFocus(\"email\");}),onBlur:function(_onBlur2){function onBlur(){return _onBlur2.apply(this,arguments);}onBlur.toString=function(){return _onBlur2.toString();};return onBlur;}(function(){onBlur(\"email\");handleBlur(\"email\");}),value:values.email,onChangeText:handleChange(\"email\")}))),React.createElement(Row,{size:4,style:global.fieldSeparator},React.createElement(Col,null,React.createElement(PasswordChecklist,{password:values.password}))));}))),React.createElement(Footer,null,React.createElement(Button,{full:true,disabled:true,variant:\"primary-contained\",text:\"Update Password\"})));}UpdatePassword.propTypes={navigation:PropTypes.objectOf(PropTypes.any).isRequired};","map":{"version":3,"sources":["/Applications/MAMP/htdocs/greninja/app/screens/Login/UpdatePassword.js"],"names":["React","useState","PropTypes","Container","Content","View","Col","Row","Grid","Formik","Yup","Header","Footer","Typography","Button","TextField","PasswordChecklist","global","validationSchema","object","shape","email","string","UpdatePassword","navigation","password","focus","setFocus","new_password","confirm_password","initialValues","setInitialValues","wrapper","content","values","setSubmitting","setTimeout","console","log","errors","touched","handleChange","handleBlur","handleSubmit","handleReset","body","onFocus","onBlur","fieldSeparator","propTypes","objectOf","any","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Container, Content, View } from \"native-base\";\nimport { Col, Row, Grid } from \"react-native-easy-grid\";\n\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport Header from \"../../components/Header\";\nimport Footer from \"../../components/Footer\";\nimport Typography from \"../../components/Typography\";\nimport Button from \"../../components/Button\";\nimport TextField from \"../../components/TextField\";\nimport PasswordChecklist from \"../../components/PasswordChecklist\";\n\nimport global from \"../../utils/GlobalStyles\";\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string().email(\"Email address format is invalid\"),\n});\n\nexport default function UpdatePassword({ navigation }) {\n  const [focus, setFocus] = useState({ email: false, password: false });\n  const [initialValues, setInitialValues] = useState({\n    new_password: \"\",\n    confirm_password: \"\",\n  });\n\n  return (\n    <Container>\n      <Header logo menu close transparent />\n\n      <Content style={global.wrapper}>\n        <View style={global.content}>\n          <Typography text=\"Update Password\" type=\"title2\" />\n\n          <Formik\n            enableReinitialize\n            initialValues={initialValues}\n            validationSchema={validationSchema}\n            onSubmit={(values, { setSubmitting }) => {\n              setTimeout(() => {\n                console.log(values);\n                setSubmitting(false);\n              }, 400);\n            }}\n          >\n            {({\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              handleReset,\n            }) => (\n              <Grid style={global.body}>\n                <Row size={4}>\n                  <Col>\n                    <TextField\n                      label=\"Old Password\"\n                      focus={focus.email}\n                      onFocus={() => onFocus(\"email\")}\n                      onBlur={() => {\n                        onBlur(\"email\");\n                        handleBlur(\"email\");\n                      }}\n                      value={values.email}\n                      onChangeText={handleChange(\"email\")}\n                    />\n                  </Col>\n                </Row>\n\n                <Row size={4} style={global.fieldSeparator}>\n                  <Col>\n                    <TextField\n                      label=\"New Password\"\n                      focus={focus.email}\n                      onFocus={() => onFocus(\"email\")}\n                      onBlur={() => {\n                        onBlur(\"email\");\n                        handleBlur(\"email\");\n                      }}\n                      value={values.email}\n                      onChangeText={handleChange(\"email\")}\n                    />\n                  </Col>\n                </Row>\n\n                <Row size={4} style={global.fieldSeparator}>\n                  <Col>\n                    <PasswordChecklist password={values.password} />\n                  </Col>\n                </Row>\n              </Grid>\n            )}\n          </Formik>\n        </View>\n      </Content>\n\n      <Footer>\n        <Button full disabled variant=\"primary-contained\" text=\"Update Password\" />\n      </Footer>\n    </Container>\n  );\n}\n\nUpdatePassword.propTypes = {\n  navigation: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}