{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{UnavailabilityError}from'@unimodules/core';import invariant from'invariant';import ExpoLocalAuthentication from\"./ExpoLocalAuthentication\";import{AuthenticationType}from\"./LocalAuthentication.types\";export{AuthenticationType};export function hasHardwareAsync(){return _regeneratorRuntime.async(function hasHardwareAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:if(ExpoLocalAuthentication.hasHardwareAsync){_context.next=2;break;}throw new UnavailabilityError('expo-local-authentication','hasHardwareAsync');case 2:_context.next=4;return _regeneratorRuntime.awrap(ExpoLocalAuthentication.hasHardwareAsync());case 4:return _context.abrupt(\"return\",_context.sent);case 5:case\"end\":return _context.stop();}}},null,null,null,Promise);}export function supportedAuthenticationTypesAsync(){return _regeneratorRuntime.async(function supportedAuthenticationTypesAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(ExpoLocalAuthentication.supportedAuthenticationTypesAsync){_context2.next=2;break;}throw new UnavailabilityError('expo-local-authentication','supportedAuthenticationTypesAsync');case 2:_context2.next=4;return _regeneratorRuntime.awrap(ExpoLocalAuthentication.supportedAuthenticationTypesAsync());case 4:return _context2.abrupt(\"return\",_context2.sent);case 5:case\"end\":return _context2.stop();}}},null,null,null,Promise);}export function isEnrolledAsync(){return _regeneratorRuntime.async(function isEnrolledAsync$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(ExpoLocalAuthentication.isEnrolledAsync){_context3.next=2;break;}throw new UnavailabilityError('expo-local-authentication','isEnrolledAsync');case 2:_context3.next=4;return _regeneratorRuntime.awrap(ExpoLocalAuthentication.isEnrolledAsync());case 4:return _context3.abrupt(\"return\",_context3.sent);case 5:case\"end\":return _context3.stop();}}},null,null,null,Promise);}export function authenticateAsync(){var options,promptMessage,result,_args4=arguments;return _regeneratorRuntime.async(function authenticateAsync$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:options=_args4.length>0&&_args4[0]!==undefined?_args4[0]:{};if(ExpoLocalAuthentication.authenticateAsync){_context4.next=3;break;}throw new UnavailabilityError('expo-local-authentication','authenticateAsync');case 3:if(typeof options==='string'){console.warn('String argument in LocalAuthentication.authenticateAsync has been deprecated. Please use options object with `promptMessage` key instead.');options={promptMessage:options};}if(options.hasOwnProperty('promptMessage')){invariant(typeof options.promptMessage==='string'&&options.promptMessage.length,'LocalAuthentication.authenticateAsync : `options.promptMessage` must be a non-empty string.');}promptMessage=options.promptMessage||'Authenticate';_context4.next=8;return _regeneratorRuntime.awrap(ExpoLocalAuthentication.authenticateAsync(_objectSpread(_objectSpread({},options),{},{promptMessage:promptMessage})));case 8:result=_context4.sent;if(result.warning){console.warn(result.warning);}return _context4.abrupt(\"return\",result);case 11:case\"end\":return _context4.stop();}}},null,null,null,Promise);}export function cancelAuthenticate(){return _regeneratorRuntime.async(function cancelAuthenticate$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(ExpoLocalAuthentication.cancelAuthenticate){_context5.next=2;break;}throw new UnavailabilityError('expo-local-authentication','cancelAuthenticate');case 2:_context5.next=4;return _regeneratorRuntime.awrap(ExpoLocalAuthentication.cancelAuthenticate());case 4:case\"end\":return _context5.stop();}}},null,null,null,Promise);}","map":{"version":3,"sources":["../src/LocalAuthentication.ts"],"names":[],"mappings":"25BAAA,OAAS,mBAAT,KAAoC,kBAApC,CACA,MAAO,CAAA,SAAP,KAAsB,WAAtB,CAEA,MAAO,CAAA,uBAAP,iCACA,OAEE,kBAFF,mCAMA,OAAqC,kBAArC,EAEA,MAAO,SAAe,CAAA,gBAAf,gIACA,uBAAuB,CAAC,gBADxB,8BAEG,IAAI,CAAA,mBAAJ,CAAwB,2BAAxB,CAAqD,kBAArD,CAFH,yDAIQ,uBAAuB,CAAC,gBAAxB,EAJR,6HAOP,MAAO,SAAe,CAAA,iCAAf,oJACA,uBAAuB,CAAC,iCADxB,+BAEG,IAAI,CAAA,mBAAJ,CAAwB,2BAAxB,CAAqD,mCAArD,CAFH,0DAIQ,uBAAuB,CAAC,iCAAxB,EAJR,gIAOP,MAAO,SAAe,CAAA,eAAf,kIACA,uBAAuB,CAAC,eADxB,+BAEG,IAAI,CAAA,mBAAJ,CAAwB,2BAAxB,CAAqD,iBAArD,CAFH,0DAIQ,uBAAuB,CAAC,eAAxB,EAJR,gIAOP,MAAO,SAAe,CAAA,iBAAf,mLACL,OADK,kDACiC,EADjC,IAGA,uBAAuB,CAAC,iBAHxB,+BAIG,IAAI,CAAA,mBAAJ,CAAwB,2BAAxB,CAAqD,mBAArD,CAJH,QAQL,GAAI,MAAO,CAAA,OAAP,GAAmB,QAAvB,CAAiC,CAC/B,OAAO,CAAC,IAAR,CACE,2IADF,EAGA,OAAO,CAAG,CAAE,aAAa,CAAE,OAAjB,CAAV,CACD,CAED,GAAI,OAAO,CAAC,cAAR,CAAuB,eAAvB,CAAJ,CAA6C,CAC3C,SAAS,CACP,MAAO,CAAA,OAAO,CAAC,aAAf,GAAiC,QAAjC,EAA6C,OAAO,CAAC,aAAR,CAAsB,MAD5D,CAEP,6FAFO,CAAT,CAID,CAEK,aAtBD,CAsBiB,OAAO,CAAC,aAAR,EAAyB,cAtB1C,mDAuBgB,uBAAuB,CAAC,iBAAxB,gCAA+C,OAA/C,MAAwD,aAAa,CAAb,aAAxD,GAvBhB,SAuBC,MAvBD,gBAyBL,GAAI,MAAM,CAAC,OAAX,CAAoB,CAClB,OAAO,CAAC,IAAR,CAAa,MAAM,CAAC,OAApB,EACD,CA3BI,iCA4BE,MA5BF,yEA+BP,MAAO,SAAe,CAAA,kBAAf,qIACA,uBAAuB,CAAC,kBADxB,+BAEG,IAAI,CAAA,mBAAJ,CAAwB,2BAAxB,CAAqD,oBAArD,CAFH,0DAIC,uBAAuB,CAAC,kBAAxB,EAJD","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport invariant from 'invariant';\n\nimport ExpoLocalAuthentication from './ExpoLocalAuthentication';\nimport {\n  LocalAuthenticationOptions,\n  AuthenticationType,\n  LocalAuthenticationResult,\n} from './LocalAuthentication.types';\n\nexport { LocalAuthenticationOptions, AuthenticationType, LocalAuthenticationResult };\n\nexport async function hasHardwareAsync(): Promise<boolean> {\n  if (!ExpoLocalAuthentication.hasHardwareAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'hasHardwareAsync');\n  }\n  return await ExpoLocalAuthentication.hasHardwareAsync();\n}\n\nexport async function supportedAuthenticationTypesAsync(): Promise<AuthenticationType[]> {\n  if (!ExpoLocalAuthentication.supportedAuthenticationTypesAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'supportedAuthenticationTypesAsync');\n  }\n  return await ExpoLocalAuthentication.supportedAuthenticationTypesAsync();\n}\n\nexport async function isEnrolledAsync(): Promise<boolean> {\n  if (!ExpoLocalAuthentication.isEnrolledAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'isEnrolledAsync');\n  }\n  return await ExpoLocalAuthentication.isEnrolledAsync();\n}\n\nexport async function authenticateAsync(\n  options: LocalAuthenticationOptions = {}\n): Promise<LocalAuthenticationResult> {\n  if (!ExpoLocalAuthentication.authenticateAsync) {\n    throw new UnavailabilityError('expo-local-authentication', 'authenticateAsync');\n  }\n\n  // Warn if using an old API - to be removed in SDK35.\n  if (typeof options === 'string') {\n    console.warn(\n      'String argument in LocalAuthentication.authenticateAsync has been deprecated. Please use options object with `promptMessage` key instead.'\n    );\n    options = { promptMessage: options };\n  }\n\n  if (options.hasOwnProperty('promptMessage')) {\n    invariant(\n      typeof options.promptMessage === 'string' && options.promptMessage.length,\n      'LocalAuthentication.authenticateAsync : `options.promptMessage` must be a non-empty string.'\n    );\n  }\n\n  const promptMessage = options.promptMessage || 'Authenticate';\n  const result = await ExpoLocalAuthentication.authenticateAsync({ ...options, promptMessage });\n\n  if (result.warning) {\n    console.warn(result.warning);\n  }\n  return result;\n}\n\nexport async function cancelAuthenticate(): Promise<void> {\n  if (!ExpoLocalAuthentication.cancelAuthenticate) {\n    throw new UnavailabilityError('expo-local-authentication', 'cancelAuthenticate');\n  }\n  await ExpoLocalAuthentication.cancelAuthenticate();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}