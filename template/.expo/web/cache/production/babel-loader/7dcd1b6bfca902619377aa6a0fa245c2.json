{"ast":null,"code":"Object.defineProperty(exports,\"__esModule\",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}var BaseMask=function(){function BaseMask(){_classCallCheck(this,BaseMask);}_createClass(BaseMask,[{key:'getKeyboardType',value:function getKeyboardType(){return'numeric';}},{key:'mergeSettings',value:function mergeSettings(obj1,obj2){var obj3={};for(var attrname in obj1){obj3[attrname]=obj1[attrname];}for(var attrname in obj2){obj3[attrname]=obj2[attrname];}return obj3;}},{key:'getRawValue',value:function getRawValue(maskedValue,settings){return maskedValue;}},{key:'getDefaultValue',value:function getDefaultValue(value){if(value===undefined||value===null){return'';}return value;}},{key:'getMask',value:function getMask(value,settings){throw new Error('getCurrentMask is not implemented');}},{key:'removeNotNumbers',value:function removeNotNumbers(text){return text.replace(/[^0-9]+/g,'');}},{key:'removeWhiteSpaces',value:function removeWhiteSpaces(text){return(text||'').replace(/\\s/g,'');}}]);return BaseMask;}();exports.default=BaseMask;","map":{"version":3,"sources":["/Applications/MAMP/htdocs/greninja/node_modules/react-native-masked-text/dist/lib/masks/_base.mask.js"],"names":["Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","BaseMask","getKeyboardType","mergeSettings","obj1","obj2","obj3","attrname","getRawValue","maskedValue","settings","getDefaultValue","undefined","getMask","Error","removeNotNumbers","text","replace","removeWhiteSpaces","default"],"mappings":"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","sourcesContent":["Object.defineProperty(exports,\"__esModule\",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}var BaseMask=function(){function BaseMask(){_classCallCheck(this,BaseMask);}_createClass(BaseMask,[{key:'getKeyboardType',value:function getKeyboardType(){return'numeric';}},{key:'mergeSettings',value:function mergeSettings(obj1,obj2){var obj3={};for(var attrname in obj1){obj3[attrname]=obj1[attrname];}for(var attrname in obj2){obj3[attrname]=obj2[attrname];}return obj3;}},{key:'getRawValue',value:function getRawValue(maskedValue,settings){return maskedValue;}},{key:'getDefaultValue',value:function getDefaultValue(value){if(value===undefined||value===null){return'';}return value;}},{key:'getMask',value:function getMask(value,settings){throw new Error('getCurrentMask is not implemented');}},{key:'removeNotNumbers',value:function removeNotNumbers(text){return text.replace(/[^0-9]+/g,'');}},{key:'removeWhiteSpaces',value:function removeWhiteSpaces(text){return(text||'').replace(/\\s/g,'');}}]);return BaseMask;}();exports.default=BaseMask;"]},"metadata":{},"sourceType":"script"}